@using System.Security.Claims
@model Capstone.Models.Event

@{
    ViewBag.Title = "Event Details";
    // Retrieve the currently logged-in user's UserId
    var currentUserIdString = User.FindFirstValue(ClaimTypes.NameIdentifier);
    int.TryParse(currentUserIdString, out int currentUserId);

    bool isEventOver = DateTime.Now > Model.DateTo;
    bool userHasPostedReview = ViewBag.Reviews != null && ((IEnumerable<Capstone.Models.Review>)ViewBag.Reviews).Any(r => r.UserId == currentUserId);

    var totalTickets = Model.EventTicketType.Sum(ett => ett.AvailableQuantity);
}

<h2>Event Details</h2>

<div>
    <h4>@Model.Name</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">Description</dt>
        <dd class="col-sm-10">@Model.Description</dd>

        <dt class="col-sm-2">Date From</dt>
        <dd class="col-sm-10">@Model.DateFrom.ToString("yyyy-MM-dd")</dd>

        <dt class="col-sm-2">Date To</dt>
        <dd class="col-sm-10">@Model.DateTo.ToString("yyyy-MM-dd")</dd>

        <dt class="col-sm-2">Host Name</dt>
        <dd class="col-sm-10">@Model.HostName</dd>

        <h3>Location</h3>
        <dd class="col-sm-10">@Model.Location?.LocationName</dd>
        <dd class="col-sm-10">@Model.Location?.AddressGoogleApi</dd>

        <div class="row">
            <!-- Google Maps Iframe -->
            <div class="col-md-6">
                <div id="map" style="height: 300px; width: 100%;"></div>
            </div>
        </div>

        <dt class="col-sm-2">DJs</dt>
        <dd class="col-sm-10">
            @if (Model.Djs != null && Model.Djs.Count > 0)
            {
                <ul>
                    @foreach (var dj in Model.Djs)
                    {
                        <li>
                            <a href="@Url.Action("Detail", "DJ", new { id = dj.DjId })">@dj.ArtistName</a>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No DJs associated with this event.</p>
            }
        </dd>

        <dt class="col-sm-2">Images</dt>
        <dd class="col-sm-10">
            @if (Model.EventImgs != null && Model.EventImgs.Count > 0)
            {
                foreach (var img in Model.EventImgs)
                {
                    var base64Image = Convert.ToBase64String(img.ImgData);
                    var imgSrc = $"data:image;base64,{base64Image}";
                    <img src="@imgSrc" alt="Event Image" style="width:200px; height:auto;" />
                }
            }
            else
            {
                <p>No images available for this event.</p>
            }
        </dd>

    </dl>
</div>
<div class="mt-3">
    <a class="btn btn-primary" href="@Url.Action("Edit", "Event", new { id = Model.EventId })">Edit event</a>
    <a class="btn btn-danger" href="@Url.Action("Delete", "Event", new { id = Model.EventId })">Delete event</a>
    <a class="btn btn-secondary" href="@Url.Action("List", "Event")">Back to List</a>
</div>
<div class="mt-5 mb-5">
    <h3>Buy Tickets</h3>
    <p>Biglietti disponibili: @totalTickets</p>
    <form asp-action="AddToCart" asp-controller="Cart" method="post">
        <input type="hidden" name="eventId" value="@Model.EventId" />
        <div class="form-group">
            <label for="ticketTypeId">Ticket Type</label>
            <select id="ticketTypeId" name="ticketTypeId" class="form-control" required>
                @foreach (var eventTicketType in Model.EventTicketType)
                {
                    var isSoldOut = eventTicketType.AvailableQuantity == 0;
                    var optionText = $"{eventTicketType.TicketType.TicketTypeName} - {eventTicketType.TicketType.Price.ToString("C")} - {eventTicketType.TicketType.TicketTypeDescription} - {(isSoldOut ? "Sold Out" : $"Available: {eventTicketType.AvailableQuantity}")}";
                    var optionValue = eventTicketType.TicketType.TicketTypeId.ToString();
                    var optionAttributes = isSoldOut ? new { disabled = "disabled" } : null;

                    if (isSoldOut)
                    {
                        <option value="@optionValue" disabled>@optionText</option>
                    }
                    else
                    {
                        <option value="@optionValue">@optionText</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <input id="quantity" type="number" name="quantity" class="form-control" value="1" min="1" required />
        </div>
        <button type="submit" class="btn btn-primary mt-2">Add to Cart</button>
    </form>
</div>

<div class="mt-5 mb-5">
    <h3>Comments</h3>
    <ul>
        @if (Model.Comments != null && Model.Comments.Count > 0)
        {
            @foreach (var comment in Model.Comments)
            {
                <li>
                    <strong>@comment.User.Username:</strong> @comment.Description
                    <br />
                    @if (!string.IsNullOrEmpty(comment.GifUrl))
                    {
                        <div class="mt-2">
                            <h5>Attached GIF:</h5>
                            <img src="@comment.GifUrl" alt="Comment GIF" class="img-fluid" style="max-width:200px; height:auto;" />
                        </div>
                    }
                    <span>Date: @comment.PublishedAt.ToShortDateString()</span><br />
                    <span>Likes: <span class="like-count" data-comment-id="@comment.CommentId">0</span></span>
                    <button class="btn btn-primary like-button" data-comment-id="@comment.CommentId">Like</button>
                    <span>Liked by:</span>
                    <ul data-comment-id="@comment.CommentId">
                        @foreach (var like in comment.CommentLikes)
                        {
                            <li class="small text-danger">@like.User.Username</li>
                        }
                    </ul>
                    <hr />
                </li>
            }
        }
        else
        {
            <p>No comments yet.</p>
        }
    </ul>


    <h4>Add a Comment</h4>
    <form asp-action="Create" asp-controller="Comment" method="post">
        <div class="form-group">
            <label for="Description">Your Comment</label>
            <textarea id="Description" name="Description" class="form-control" required></textarea>
        </div>
        <div id="gifSection" style="display:none;">
            <div class="form-group">
                <label for="gifSearch">Search for a GIF:</label>
                <input type="text" id="gifSearch" class="form-control" placeholder="Search GIF...">
            </div>
            <div id="gifResults" class="d-flex flex-wrap mt-3"></div>
            <div id="selectedGifContainer" class="mt-1" style="display:none;">
                <h5>Selected GIF:</h5>
                <img id="selectedGif" src="" alt="Selected GIF" class="img-fluid" style="max-width:100px; height:auto;">
                <input type="hidden" name="GifUrl" id="hiddenGifUrl" />
            </div>
        </div>
        <input type="hidden" name="EventId" value="@Model.EventId" />
        <div class=" mt-2">
            <button type="submit" class="btn btn-primary">Submit</button>
                <button id="addGifSectionBtn" type="button" class="btn btn-secondary ">Add GIF</button>
        </div>
    </form>
</div>
<hr />


<h3>Reviews</h3>
@foreach (var review in ViewBag.Reviews as IEnumerable<Capstone.Models.Review>)
{
    var isCurrentUserReview = review.UserId == currentUserId;

    <div id="review-content-@review.ReviewId">
        <strong>@review.User.Username</strong> - <span id="review-rating-@review.ReviewId">@review.Rating</span>/5
        <h4 id="review-title-@review.ReviewId">@review.Title</h4>
        <p id="review-description-@review.ReviewId">@review.Description</p>

        @if (review.ReviewImgs.Any())
        {
            <div>
                <h5>Images:</h5>
                @foreach (var img in review.ReviewImgs)
                {
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(img.ImgData)" alt="Review Image" style="width:100px; margin-right: 10px;" />
                }
            </div>
        }

        @if (isCurrentUserReview)
        {
            <button type="button" class="btn btn-primary" onclick="toggleEditMode(@review.ReviewId)">Edit</button>
        }

        <form asp-action="DeleteReview" method="post" style="display:inline;">
            @Html.AntiForgeryToken()
            <input type="hidden" name="reviewId" value="@review.ReviewId" />
            <input type="hidden" name="eventId" value="@Model.EventId" />
            <button type="submit" class="btn btn-danger">Delete</button>
        </form>
    </div>

    <!-- Inline Edit Form (hidden by default) -->
    <div id="edit-review-form-@review.ReviewId" style="display:none; margin-top: 15px;">
        <form method="post" action="@Url.Action("EditReview", "Event")" onsubmit="return submitEditForm(@review.ReviewId);">
            @Html.AntiForgeryToken()
            <input type="hidden" name="EventId" value="@Model.EventId" />
            <input type="hidden" name="ReviewId" value="@review.ReviewId" />

            <div class="form-group">
                <label for="Title">Title</label>
                <input type="text" id="Title-@review.ReviewId" name="Title" class="form-control" value="@review.Title" required />
            </div>

            <div class="form-group">
                <label for="Description">Description</label>
                <textarea id="Description-@review.ReviewId" name="Description" class="form-control" required>@review.Description</textarea>
            </div>

            <div class="form-group">
                <label for="Rating">Rating</label>
                <input type="number" id="Rating-@review.ReviewId" name="Rating" class="form-control" min="1" max="5" value="@review.Rating" required />
            </div>
            @if (review.ReviewImgs.Any())
            {
                <div>
                    <h5>Current Uploaded Images:</h5>
                    @foreach (var img in review.ReviewImgs)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(img.ImgData)" alt="Review Image" style="width:100px; margin-right: 10px;" />
                    }
                </div>
            }
            <div class="form-group">
                <label for="imageFiles">Upload New Images</label>
                <input type="file" id="imageFiles-@review.ReviewId" name="imageFiles" multiple class="form-control" />
            </div>

            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-secondary" onclick="toggleEditMode(@review.ReviewId)">Cancel</button>
        </form>
    </div>

    <hr />
}

@if (isEventOver && !userHasPostedReview)
{
    <h4>Add a Review</h4>
    @using (Html.BeginForm("CreateReview", "Event", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="EventId" value="@Model.EventId" />

        <div class="form-group">
            <label for="Title">Title</label>
            <input type="text" id="Title" name="Title" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <textarea id="Description" name="Description" class="form-control" required></textarea>
        </div>

        <div class="form-group">
            <label for="Rating">Rating</label>
            <input type="number" id="Rating" name="Rating" class="form-control" min="1" max="5" required />
        </div>

        <div class="form-group">
            <label for="imageFiles">Upload Images</label>
            <input type="file" name="imageFiles" multiple class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Submit Review</button>
    }
}
else if (userHasPostedReview)
{
    <p><strong>You have already reviewed this event.</strong></p>
}
else
{
    <p>You can post a review after the event is over.</p>
}


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    function toggleEditMode(reviewId) {
        var reviewContentDiv = $('#review-content-' + reviewId);
        var editFormDiv = $('#edit-review-form-' + reviewId);

        if (editFormDiv.css('display') === 'none') {
            editFormDiv.css('display', 'block');   // Mostra il form di modifica
            reviewContentDiv.css('display', 'none'); // Nasconde il contenuto della recensione
        } else {
            editFormDiv.css('display', 'none');    // Nasconde il form di modifica
            reviewContentDiv.css('display', 'block');  // Mostra il contenuto della recensione
        }
    }

    // Funzione per gestire la submission del form via AJAX
    function submitEditForm(reviewId) {
        var form = $('#edit-review-form-' + reviewId + ' form');
        var formData = new FormData(form[0]);

        // Invia i dati del form tramite AJAX (jQuery)
        $.ajax({
            url: form.attr('action'),
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            dataType: 'json',
            success: function (data) {
                if (data.success) {
                    // Aggiorna l'interfaccia con i nuovi dati della recensione
                    $('#review-title-' + reviewId).text(data.review.title);
                    $('#review-description-' + reviewId).text(data.review.description);
                    $('#review-rating-' + reviewId).text(data.review.rating);

                    // Torna alla modalità di visualizzazione
                    toggleEditMode(reviewId);
                } else {
                    alert('Errore durante l\'aggiornamento della recensione: ' + data.error);
                }
            },
            error: function (xhr, status, error) {
                console.error('Errore:', error);
                alert('Si è verificato un errore durante l\'aggiornamento della recensione.');
            }
        });

        // Previene l'invio tradizionale del form
        return false;
    }




    $(document).ready(function () {
        // Toggle GIF section visibility
        $('#addGifSectionBtn').click(function () {
            $('#gifSection').toggle();
            $('#gifSearch').val(''); // Clear the search input
            $('#gifResults').empty(); // Clear the search results
            $('#selectedGifContainer').hide(); // Hide the selected GIF container
        });

        // Search for GIFs
        $('#gifSearch').on('input', function () {
            var query = $('#gifSearch').val().trim();
            if (query === '') {
                $('#gifResults').empty(); // Clear results if query is empty
                return;
            }

            searchGifs(query).done(function (gifs) {
                var $gifResults = $('#gifResults');
                $gifResults.empty(); // Clear previous results

                gifs.forEach(function (gif) {
                    var gifUrl = gif.images.fixed_height.url;
                    var $imgElement = $('<img>').attr('src', gifUrl)
                        .addClass('img-thumbnail m-2')
                        .css('cursor', 'pointer')
                        .click(function () {
                            $('#selectedGif').attr('src', gifUrl);
                            $('#hiddenGifUrl').val(gifUrl);
                            $('#selectedGifContainer').show(); // Show the selected GIF container
                            $('#gifResults').empty(); // Clear the GIF search results
                        });

                    $gifResults.append($imgElement);
                });
            }).fail(function (error) {
                console.error('Error fetching GIFs:', error);
                alert('Failed to fetch GIFs. Please try again.');
            });
        });

        function searchGifs(query) {
            var apiKey = 'RZ3yJtiMZI3TgQaK70OZ73vEmGZDpgmH'; // Ensure the API key is correctly set
            var url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${query}&limit=9`;
            return $.ajax({
                url: url,
                method: 'GET'
            }).then(function (response) {
                return response.data;
            });
        }
    });


    $(document).ready(function () {
        $('.like-button').click(function () {
            var button = $(this);
            var commentId = button.data('comment-id');

            $.ajax({
                url: '@Url.Action("ToggleLike", "Comment")',
                type: 'POST',
                data: { id: commentId },
                success: function (response) {
                    var likeCountSpan = $('.like-count[data-comment-id="' + commentId + '"]');
                    var likedByList = $('ul[data-comment-id="' + commentId + '"]');

                    likeCountSpan.text(response.likeCount);

                    likedByList.empty();
                    response.likes.forEach(function (username) {
                        likedByList.append('<li class="small text-danger">' + username + '</li>');
                    });
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", status, error);
                    alert('Si è verificato un errore durante l\'operazione di like/unlike.');
                }
            });
        });

        // Carica i conteggi iniziali dei like e le liste quando la pagina viene caricata
        $('.like-count').each(function () {
            var commentId = $(this).data('comment-id');
            $.ajax({
                url: '@Url.Action("GetCommentLikes", "Comment")',
                type: 'GET',
                data: { commentId: commentId },
                success: function (response) {
                    var likeCountSpan = $('.like-count[data-comment-id="' + commentId + '"]');
                    var likedByList = $('ul[data-comment-id="' + commentId + '"]');

                    likeCountSpan.text(response.likeCount);

                    likedByList.empty();
                    response.likes.forEach(function (username) {
                        likedByList.append('<li class="small text-danger">' + username + '</li>');
                    });
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", status, error);
                }
            });
        });
    });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9xu0MPHUBDzLbqKracH6S8-a9n79XXjA&libraries=places"></script>
<script>
    let map;
    let marker;

    function initMap() {
        const defaultLocation = { lat: 41.9028, lng: 12.4964 }; // Default to Rome

        map = new google.maps.Map(document.getElementById("map"), {
            center: defaultLocation,
            zoom: 13,
        });

        marker = new google.maps.Marker({
            map: map,
            draggable: true,
            position: defaultLocation,
        });

        // Geocoder for converting address to coordinates
        const geocoder = new google.maps.Geocoder();

        // Address from the model
        const address = '@Model.Location?.LocationName + @Model.Location?.AddressGoogleApi';

        if (address) {
            geocoder.geocode({ address: address }, function (results, status) {
                if (status === 'OK') {
                    // Update map and marker location
                    map.setCenter(results[0].geometry.location);
                    map.setZoom(15);
                    marker.setPosition(results[0].geometry.location);
                } else {
                    alert("Geocode was not successful for the following reason: " + status);
                }
            });
        } else {
            // If no address is provided, show the default location
            marker.setPosition(defaultLocation);
        }
    }

    // Initialize map when the page loads
    $(document).ready(function () {
        initMap();
    });
</script>