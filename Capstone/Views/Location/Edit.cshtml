@model Capstone.Models.Location

@{
    ViewBag.Title = "Edit Location";
}

<h2>Edit Location</h2>

<form asp-action="Edit" method="post">
    @Html.AntiForgeryToken()

    <input type="hidden" asp-for="LocationId" />

    <div class="form-group">
        <label asp-for="LocationName" class="control-label"></label>
        <input asp-for="LocationName" id="locationName" class="form-control" placeholder="Search for location..." />
        <span asp-validation-for="LocationName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="AddressGoogleApi" class="control-label"></label>
        <input asp-for="AddressGoogleApi" id="addressGoogleApi" class="form-control" readonly />
        <span asp-validation-for="AddressGoogleApi" class="text-danger"></span>
    </div>

    <div id="map" style="height: 400px; width: 100%;"></div> <!-- Add this to show the map -->

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <a asp-action="List" class="btn btn-secondary">Back to List</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9xu0MPHUBDzLbqKracH6S8-a9n79XXjA&libraries=places"></script>
    <script>
        let map;
        let marker;
        let autocomplete;

        function initMap() {
            const defaultLocation = { lat: 41.9028, lng: 12.4964 }; // Default to Rome if no location is provided
            map = new google.maps.Map(document.getElementById("map"), {
                center: defaultLocation,
                zoom: 13,
            });

            marker = new google.maps.Marker({
                map: map,
                draggable: true,
                position: defaultLocation,
            });

            autocomplete = new google.maps.places.Autocomplete(document.getElementById('locationName'));
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', function () {
                let place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for this location.");
                    return;
                }

                // Update map and marker location
                map.setCenter(place.geometry.location);
                map.setZoom(15);
                marker.setPosition(place.geometry.location);

                // Populate address field
                document.getElementById("addressGoogleApi").value = place.formatted_address;
            });

            // If the location is already set, initialize with that location
            const locationName = '@Model.LocationName';
            const addressGoogleApi = '@Model.AddressGoogleApi';

            if (locationName && addressGoogleApi) {
                autocomplete.setBounds(map.getBounds());
                document.getElementById('locationName').value = locationName;
                document.getElementById('addressGoogleApi').value = addressGoogleApi;

                // Perform a search to update the map and marker
                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ address: addressGoogleApi }, function (results, status) {
                    if (status === 'OK') {
                        map.setCenter(results[0].geometry.location);
                        marker.setPosition(results[0].geometry.location);
                    }
                });
            }
        }

        window.onload = initMap;
    </script>
}
