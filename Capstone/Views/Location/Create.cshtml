@model Capstone.Models.Location

@{
    ViewBag.Title = "Create Location";
}

<h2>Create New Location</h2>

<form asp-action="Create" method="post" id="createLocationForm">
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label asp-for="LocationName" class="control-label"></label>
        <input asp-for="LocationName" id="locationName" class="form-control" placeholder="Search for location..." />
        <span asp-validation-for="LocationName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="AddressGoogleApi" class="control-label"></label>
        <input asp-for="AddressGoogleApi" id="addressGoogleApi" class="form-control" readonly />
        <span asp-validation-for="AddressGoogleApi" class="text-danger"></span>
    </div>

    <!-- Add a div for the map -->
    <div id="map" style="height: 400px; width: 100%;"></div>

    <button type="submit" class="btn btn-primary">Create</button>
    <a asp-action="List" class="btn btn-secondary">Back to List</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9xu0MPHUBDzLbqKracH6S8-a9n79XXjA&libraries=places" async defer></script>

<script>
    let map;
    let marker;
    let autocomplete;

    function initMap() {
        const defaultLocation = { lat: 41.9028, lng: 12.4964 }; // Rome

        const mapElement = document.getElementById("map");
        if (mapElement) {
            map = new google.maps.Map(mapElement, {
                center: defaultLocation,
                zoom: 13,
            });

            marker = new google.maps.Marker({
                map: map,
                draggable: true,
                position: defaultLocation,
            });

            autocomplete = new google.maps.places.Autocomplete(document.getElementById('locationName'));
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', function () {
                let place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for this location.");
                    return;
                }

                // Update map and marker location
                map.setCenter(place.geometry.location);
                map.setZoom(15);
                marker.setPosition(place.geometry.location);

                // Populate address field
                document.getElementById("addressGoogleApi").value = place.formatted_address;
            });
        } else {
            console.error("Map element not found");
        }
    }

    window.addEventListener('DOMContentLoaded', initMap);
</script>
